theme(legend.position = 'none') + theme(axis.ticks.y = element_blank())
plot_estatico
plot_dinamico <- plot_estatico +
labs(subtitle = "{frame_time}") +
transition_time(Ano) +
ease_aes('linear')
# plot_dinamico
animate(plot_dinamico, bg = 'transparent', nframes = 120, height = 488, width = 688)
dados_plot <- dados_com_cores %>% filter(Ano == "2015")
dados_plot <- dados_com_cores
plot_estatico <- ggplot(dados_plot, aes(y = Valor, x = reorder(Categoria, Valor))) +
geom_bar(aes(fill = CoresNormais), stat = 'identity') +
geom_tile(aes(y = inicial, color = CoresEscuras), width = 0.9, height = 0.00001, linetype = 'dotted') +
geom_tile(aes(y = final, color = CoresEscuras), width = 0.9, height = 0.00001) +
geom_text(aes(y = Valor + 0.005,
label = percent(round(Valor, 4)),
color = CoresEscuras),
position = position_dodge(1),
size = 5, family = "Source Sans Pro", vjust = 0) +
geom_text(aes(y = ifelse(Categoria == "Benefícios Previdenciários RGPS", inicial, NA)),
x = qde_categorias + 0.8,
label = min(dados_plot$Ano),
vjust = "top", hjust = "center", color = "grey50",
family = "Source Sans Pro", size = 3) +
geom_text(aes(y = ifelse(Categoria == "Benefícios Previdenciários RGPS", final, NA)),
x = qde_categorias + 0.8,
label = max(dados_plot$Ano),
vjust = "top", hjust = "center", color = "grey50",
family = "Source Sans Pro", size = 3) +
coord_flip() +
scale_y_continuous(labels = percent, expand = c(0, 0), limits = c(0,0.095)) +
scale_x_discrete(expand = c(0, 1.01)) +
scale_fill_identity() +
scale_color_identity() +
#scale_color_manual(values = paleta_darker) +
#scale_fill_manual(values = paleta) +
labs(
x = NULL,
y = "Percentual do PIB",
title = NULL
) +
#geom_text(aes(label = Ano), x = 1, y = 0.05, size = 5) +
tema() +
theme(legend.position = 'none') + theme(axis.ticks.y = element_blank())
plot_estatico
plot_dinamico <- plot_estatico +
labs(subtitle = "{frame_time}") +
transition_time(Ano) +
ease_aes('linear')
# plot_dinamico
animate(plot_dinamico, bg = 'transparent', nframes = 100, height = 488, width = 688)
plot_dinamico <- plot_estatico +
labs(subtitle = "{frame_time}") +
transition_time(Ano) +
ease_aes('linear')
# plot_dinamico
animate(plot_dinamico, bg = 'transparent', nframes = 120, height = 488, width = 688)
anim_save("despesas.gif", animation = last_animation())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ckanr)
install.packages("ckanr")
library(tidyverse)
library(ckanr)
library(readxl)
library(scales)
library(ipeaData)
library(extrafont)
library(gganimate)
library(RColorBrewer)
library(lubridate)
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Source Sans Pro", colour = "grey20"),
axis.text = element_text(family = "Source Sans Pro", colour = "grey20", size = 12),
title = element_text(face = "bold"), # size para o Shiny
plot.subtitle = element_text(face = "plain", size = 20, color = "grey20"),
plot.caption = element_text(face = "italic"),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 12),
legend.title = element_text(size = 12),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(.25, "cm"),
axis.title = element_text(size = 11),
legend.position = 'bottom')
}
recurso_TT <- resource_show(id="bf69babd-ac07-40ce-90ff-c8e07ec8c8bf",url="https://apickan.tesouro.gov.br/ckan")
download.file(recurso_TT$url, destfile = "./divida.xlsx", mode = 'wb' )
tabela <- read_excel("divida.xlsx", skip = 4)
resgates <- tabela %>%
filter(.[1] == "RESGATES") %>% # (1)
select(-1) %>% # (2)
gather(key = Mes_Ano, value = Valor) %>%
separate(Mes_Ano, into = c("Mes", "Ano"), sep = "/") %>%
filter(!is.na(Ano)) %>% # (3)
mutate(Ano = as.integer(paste0('20',Ano)), # (4)
Mes = factor(Mes, levels = c("Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"))) %>%
filter(Ano > 2006) # (5)
# (1) to filtrando pela primeira coluna.
# (2) to excluindo essa coluna, pq não me interessa
# (3) a tabela original possui colunas para os totais dos anos. quando uso o "separate", ele não encontra o "/" e gera um NA para o "Ano". Aqui estou removendo essas linhas.
# (4) para o "Ano" ficar com 4 dígitos e em formato numérico.
# (5) porque em 2006 só existem dados para novembro e dezembro.
# dados_plot_cor <- resgates %>% filter(Ano == 2014)
dados_plot_cor <- resgates
# theme(panel.grid.major.y = element_line(color = "grey90", linetype = "dotted"))
# plot1 <- ggplot(dados_plot_cor, aes(x = Mes, y = Valor)) +
#   geom_bar(color = "white", width = 0.4, fill = 'dodgerblue', stat = 'identity') +
#   scale_y_continuous(limits = c(-40000, NA)) +
#   coord_polar(theta = "x", start = 0, direction = 1) +
#   tema() +
#   theme(legend.position = 'none')
plot1 <- ggplot(dados_plot_cor, aes(x = Mes, y = Valor, color = -Valor)) +
geom_point(size = 3) +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000),
size = 4, family = "Source Sans Pro") +
scale_colour_gradientn(colours = rev(brewer.pal(8, "YlOrRd")[2:8])) +
coord_polar(theta = "x", start = 0, direction = 1) +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_din1 <- plot1 +
labs(subtitle = "{frame_time}") +
transition_time(Ano) +
ease_aes('linear')
# plot_dinamico
animate(plot_din1, nframes = 100, height = 480, width = 800)
maximo = 175000
qde_cores = 7
intervalo = maximo / qde_cores
# uma rotininha para fragmentar os valores em colunas correspondendo aos intervalos de valores.
resgates_frag <- resgates # criando uma cópia
niveis_faixas <- NULL
for (i in 1:qde_cores) {
nome_coluna <- paste0("Faixa ", (i-1)*intervalo,'-', i*intervalo)
resgates_frag[[nome_coluna]] <- # (1)
ifelse(resgates_frag$Valor/(i*intervalo) > 1, # (2)
intervalo,
ifelse(resgates_frag$Valor - (i-1)*intervalo < 0,
0,
resgates_frag$Valor - (i-1)*intervalo))
niveis_faixas <- c(niveis_faixas, nome_coluna) # (3)
}
# (1) dou nome às novas variáveis...
# (2) aqui faço a fragmentação, preenchendo as colunas adequadas.
# (3) fazendo um vetor de niveis para a coluna faixa
resgates_frag <- resgates_frag %>%
gather(contains("Faixa"), key = "Faixa", value = "Valor_faixa") %>%
mutate(Faixa = factor(Faixa, levels = rev(niveis_faixas)))
dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
# dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000),
size = 4, family = "Source Sans Pro") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd"))[2:8]) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_din_frag <- plot_equalizador +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('quadratic-in-out'), height = 480, width = 800)
plot_din_frag <- plot_equalizador +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('quadratic-in-out'), height = 480, width = 800)
# dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000),
size = 4, family = "Source Sans Pro") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd"))[2:8]) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_eq_polar <- plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_eq_polar
plot_din_frag <- plot_eq_polar +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('quadratic-in-out'), height = 480, width = 800)
plot_din_frag <- plot_eq_polar +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('quadratic-in-out'), height = 480, width = 800)
# dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000),
size = 4, family = "Source Sans Pro", color = "grey20") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd"))[2:8]) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_eq_polar <- plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_eq_polar
plot_din_frag <- plot_eq_polar +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
anim_save("divida_equalizador.gif", animation = last_animation())
# dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000), face = "plain",
size = 4, family = "Source Sans Pro", color = "grey20") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd"))[2:8]) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_eq_polar <- plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_eq_polar
# dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000), fontface = "plain",
size = 4, family = "Source Sans Pro", color = "grey20") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd"))[2:8]) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_eq_polar <- plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_eq_polar
plot_din_frag <- plot_eq_polar +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
anim_save("divida_equalizador.gif", animation = last_animation())
plot_din_frag <- plot_eq_polar + theme(panel.grid.major.y = element_blank())
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
plot_din_frag <- plot_eq_polar + theme(panel.grid.major.y = element_blank()) +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
anim_save("divida_equalizador2.gif", animation = last_animation())
plot_din_frag <- plot_eq_polar + theme(panel.grid.major.x = element_blank()) +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
anim_save("divida_equalizador2.gif", animation = last_animation())
display.brewer.all()
# dados_plot_frag <- resgates_frag %>% filter(Ano == 2014)
dados_plot_frag <- resgates_frag
plot_equalizador <- ggplot(dados_plot_frag, aes(x = Mes, y = Valor_faixa, fill = Faixa)) +
geom_col(width = 0.4, color = 'white') +
geom_text(aes(label = format(round(Valor/1000,0),
big.mark = ".",
decimal.mark = ","),
y = Valor + 10000), fontface = "plain",
size = 4, family = "Source Sans Pro", color = "grey20") +
scale_y_continuous(limits = c(-50000, NA), breaks = (0:7)*intervalo,
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark = ",")}) +
scale_fill_manual(values = rev(brewer.pal(8, "YlOrRd")[2:8])) +
#coord_polar(theta = "x", start = 0, direction = 1) +
labs(
y = "Bilhões de R$",
x = NULL
) +
tema() +
theme(legend.position = 'none',
panel.grid.major.y = element_line(color = "grey80", linetype = "dotted"),
panel.grid.major.x = element_line(color = "grey90", linetype = "solid"),
axis.title.y = element_text(hjust = 0.85))
plot_equalizador
plot_eq_polar <- plot_equalizador + coord_polar(theta = "x", start = 0, direction = 1)
plot_eq_polar
plot_din_frag <- plot_eq_polar + theme(panel.grid.major.x = element_blank()) +
labs(subtitle = "{closest_state}") +
transition_states(Ano, 1, 4, wrap = FALSE)
animate(plot_din_frag + ease_aes('linear'), bg = 'transparent', height = 488, width = 688)
anim_save("divida_equalizador2.gif", animation = last_animation())
X <- data.frame("a" = rep(10, 10), "b" = rep(20,10), "c" = rep(30,10))
View(X)
vector_x <- ("a" = 10, "b" = 20, "c" = 30)
vector_x <- (10, 20, 30)
vector_x <- c("a"10, "b" = 20, "c" = 30)
vector_x <- c("a" = 10, "b" = 20, "c" = 30)
library(tidyverse)
y <- x %>%
mutate_at(c(a:c), funs(./vector_x[.]))
y <- X %>%
mutate_at(c(a:c), funs(./vector_x[.]))
y <- X %>%
mutate_at(c("a":"c"), funs(./vector_x[.]))
y <- X %>%
mutate_at("a":"c", funs(./vector_x[.]))
y <- X %>%
mutate_all(funs(./vector_x[.]))
y <- X %>%
mutate_all(funs(./vector_x[[.]]))
X / vector_x
X / (1/vector_x)
X %o% (1/vector_x)
y <- X %>%
mutate_all(funs([[.]]/vector_x[.]))
y <- X %>%
mutate_all(funs([.]/vector_x[.]))
y <- X %>%
mutate_all(funs(. / vector_x[.]))
df_x <- data.frame("a" = 10, "b" = 20, "c" = 30)
X / df_x
y <- X %>%
mutate_all(funs(. / df_x[.]))
y <- X %>%
mutate_all(funs(. / df_x$.))
data.frame(vector_x)
as.data.frame((vector_x))
df_X
df_x
as.data.frame((vector_x))
vector_dataframed <- as.data.frame((vector_x))
# me resulta em um data frame com uma
t(vector_dataframed)
vector_dataframed <- t(vector_dataframed)
X_alterado <- X %>%
mutate_all(funs(. / vector_dataframed$.))
View(vector_dataframed)
class(vector_dataframed)
vector_dataframed <- as.matrix((vector_x))
vector_dataframed <- as.data.frame(t(vector_dataframed))
View(vector_dataframed)
X_alterado <- X %>%
mutate_all(funs(. / vector_dataframed$.))
View(X_alterado)
View(X)
### Outra solução para a conversão do vetor em data frame:
vector_dataframed2 <- data.frame(as.list(vector_x))
View(vector_dataframed2)
X_alterado2 <- X %>%
mutate_all(funs(. / vector_dataframed2$.))
identical(X_alterado, X_alterado2)
# comparando os resultados:
identical(vector_dataframed, vector_dataframed2)
install.packages("gganimate")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(scales)
library(readxl)
#library(ipeaData)
library(extrafont)
library(gganimate)
library(RColorBrewer)
#library(ckanr)
#library(skimr)
library(shiny)
library(leaflet)
install.packages("leaflet")
install.packages("ggbeeswarm")
# dados municípios
perfil_mun <- read_excel("./dados/Base MUNIC 2017.xls", sheet = "Variáveis externas")
# dados municípios
perfil_mun <- read_excel("./dados/Base MUNIC 2017.xls", sheet = "Variáveis externas")
getwd()
setwd("~/GitHub/DC")
# dados municípios
perfil_mun <- read_excel("./dados/Base MUNIC 2017.xls", sheet = "Variáveis externas")
# dados municípios
perfil_mun <- read_excel('./dados/Base MUNIC 2017.xls', sheet = "Variáveis externas")
# dados municípios
perfil_mun <- read_excel('./dados/BaseMUNIC2017.xls', sheet = "Variáveis externas")
# dados municípios
perfil_mun <- read_excel('/dados/BaseMUNIC2017.xls', sheet = "Variáveis externas")
# dados municípios
perfil_mun <- read_excel('./dados/BaseMUNIC2017.xls', sheet = "Variáveis externas")
tabela_mun1 <- read.csv2("./dados/finbraRGF_mun.csv", skip = 5)
tabela_mun2 <- read.csv2("./dados/finbraRGF_mun_semestre.csv", skip = 5)
install.packages("readxl")
install.packages("readxl")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(readxl)
# dados municípios
perfil_mun <- read_excel('./dados/Base MUNIC 2017.xls', sheet = "Variáveis externas")
install.packages("geojsonio")
install.packages("rgdal")
extrafont::font_import()
extrafont::loadfonts()
mapa_brasil <- geojsonio::geojson_read("./dados/brazil_geo.geojson", what = "sp")
require("rgdal")
install.packages("rgdal")
mapa_brasil <- geojsonio::geojson_read("./dados/brazil_geo.geojson", what = "sp")
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
deployApp()
library(rsconnect)
deployApp()
deployApp("dcl")
deployApp("DCL")
deployApp("DCL.Rmd")
deployApp("DCL.Rmd", name = "DivCon")
deployApp("divida_consolidada.Rmd")
deployApp()
deployApp()
tabela_estados <- read.csv2("./dados/finbraRGF_estados.csv", skip = 5) %>%
mutate(Escopo    = "Estados",
Exercicio = 2018)
tabela_mun1 <- read.csv2("./dados/finbraRGF_mun.csv", skip = 5)
tabela_mun2 <- read.csv2("./dados/finbraRGF_mun_semestre.csv", skip = 5)
# dados municípios
perfil_mun <- read_excel('./dados/BaseMUNIC2017.xls', sheet = "Variáveis externas")
tabela_estados <- read.csv2("./dados/finbraRGF_estados.csv", skip = 5) %>%
mutate(Escopo    = "Estados",
Exercicio = 2018)
library(magrittr)
tabela_estados <- read.csv2("./dados/finbraRGF_estados.csv", skip = 5) %>%
mutate(Escopo    = "Estados",
Exercicio = 2018)
library(dplyr)
tabela_estados <- read.csv2("./dados/finbraRGF_estados.csv", skip = 5) %>%
mutate(Escopo    = "Estados",
Exercicio = 2018)
saveRDS(perfil_mun, tabela_estados, tabela_mun1, tabela_mun2, mapa_brasil, file = "dados.RData")
saveRDS(c(perfil_mun, tabela_estados, tabela_mun1, tabela_mun2, mapa_brasil), file = "dados.RData")
readRDS("dados.RData")
mapa_brasil <- NA
perfil_mun <- NA
readRDS("dados.RData")
perfil_mun <- read_excel('./dados/BaseMUNIC2017.xls', sheet = "Variáveis externas")
mapa_brasil <- geojsonio::geojson_read("./dados/brazil_geo.geojson", what = "sp")
